import os
import logging
import tempfile
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from gtts import gTTS
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('Agg')
from io import BytesIO
import textwrap
from collections import Counter
import numpy as np
import re

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class EducationalBot:
    def __init__(self, token):
        self.token = token
        self.supported_languages = {
            'ru': '–†—É—Å—Å–∫–∏–π',
            'en': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π', 
            'es': '–ò—Å–ø–∞–Ω—Å–∫–∏–π',
            'fr': '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π',
            'de': '–ù–µ–º–µ—Ü–∫–∏–π'
        }

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
        # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.clear()
        
        keyboard = [
            [InlineKeyboardButton("üéß –¢–µ–∫—Å—Ç –≤ —Ä–µ—á—å", callback_data="tts")],
            [InlineKeyboardButton("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞", callback_data="visualize")],
            [InlineKeyboardButton("üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è", callback_data="interactive")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = """
ü§ñ **–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ë–æ—Ç –¥–ª—è –î–æ—Å—Ç—É–ø–Ω–æ–≥–æ –û–±—É—á–µ–Ω–∏—è**

–Ø –ø–æ–º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è –≤—Å–µ—Ö! –í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:

üéß **–¢–µ–∫—Å—Ç –≤ —Ä–µ—á—å** - –æ–∑–≤—É—á–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–ª–∞–±–æ–≤–∏–¥—è—â–∏—Ö
üìä **–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞** - —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏ –∏ –¥–∏–∞–≥—Ä–∞–º–º
üéÆ **–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è** - –∏–≥—Ä–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá
        """
        await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

    async def handle_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "tts":
            await self.show_tts_menu(query, context)
            
        elif query.data.startswith("lang_"):
            await self.handle_language_selection(query, context)
            
        elif query.data == "visualize":
            await self.show_visualization_menu(query, context)
            
        elif query.data.startswith("viz_"):
            await self.handle_visualization_selection(query, context)
            
        elif query.data == "interactive":
            await self.show_interactive_menu(query, context)
            
        elif query.data == "help":
            await self.show_help(query, context)
            
        elif query.data == "back":
            await self.show_main_menu(query, context)

    async def show_tts_menu(self, query, context):
        """–ú–µ–Ω—é —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å"""
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        context.user_data.pop('viz_type', None)
        context.user_data['mode'] = 'tts'
        
        keyboard = [
            [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
             InlineKeyboardButton("üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π", callback_data="lang_en")],
            [InlineKeyboardButton("üá™üá∏ –ò—Å–ø–∞–Ω—Å–∫–∏–π", callback_data="lang_es"),
             InlineKeyboardButton("üá´üá∑ –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π", callback_data="lang_fr")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üéß **–¢–µ–∫—Å—Ç –≤ —Ä–µ—á—å**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –æ–∑–≤—É—á–∫–∏:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def handle_language_selection(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
        lang = query.data.split("_")[1]
        context.user_data['tts_lang'] = lang
        context.user_data['mode'] = 'tts_waiting_text'
        
        await query.edit_message_text(
            f"üéß –í—ã–±—Ä–∞–Ω —è–∑—ã–∫: {self.supported_languages[lang]}\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–µ—á—å (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤):"
        )

    async def show_visualization_menu(self, query, context):
        """–ú–µ–Ω—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ TTS
        context.user_data.pop('tts_lang', None)
        context.user_data.pop('mode', None)
        context.user_data['mode'] = 'viz_choosing_type'
        
        keyboard = [
            [InlineKeyboardButton("üìà –ß–∞—Å—Ç–æ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="viz_freq")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—Å—Ç–∞", callback_data="viz_stats")],
            [InlineKeyboardButton("üéØ –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞", callback_data="viz_pie")],
            [InlineKeyboardButton("üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ–∫—Å—Ç–∞", callback_data="viz_structure")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = """
üìä **–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞**

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏:

üìà **–ß–∞—Å—Ç–æ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑** - —Ç–æ–ø —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—Å—Ç–∞** - –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
üéØ **–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞** - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞—Å—Ç–µ–π —Ä–µ—á–∏
üìã **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ–∫—Å—Ç–∞** - –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ

–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ üëá
        """
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

    async def handle_visualization_selection(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
        viz_type = query.data.split("_")[1]
        context.user_data['viz_type'] = viz_type
        context.user_data['mode'] = 'viz_waiting_text'
        
        prompts = {
            'freq': "üìà **–ß–∞—Å—Ç–æ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–ª–æ–≤**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–∞—Å—Ç–æ—Ç—ã —Å–ª–æ–≤:",
            'stats': "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—Å—Ç–∞**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
            'pie': "üéØ **–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–æ–≤:",
            'structure': "üìã **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ–∫—Å—Ç–∞**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:"
        }
        
        await query.edit_message_text(prompts.get(viz_type, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:"))

    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text.strip()
        
        if not text:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç.")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        current_mode = context.user_data.get('mode')
        
        logger.info(f"Current mode: {current_mode}, User data: {context.user_data}")
        
        if current_mode == 'tts_waiting_text':
            await self.text_to_speech(update, context, text)
        elif current_mode == 'viz_waiting_text':
            await self.handle_visualization(update, context, text)
        else:
            # –ï—Å–ª–∏ —Ä–µ–∂–∏–º –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await self.start(update, context)

    async def text_to_speech(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å"""
        if len(text) > 1000:
            await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
            
        user_lang = context.user_data.get('tts_lang', 'ru')
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
            status_msg = await update.message.reply_text("üîä –°–∏–Ω—Ç–µ–∑–∏—Ä—É—é —Ä–µ—á—å...")
            
            # –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(suffix='.mp3', delete=False) as temp_file:
                tts = gTTS(text=text, lang=user_lang, slow=False)
                tts.save(temp_file.name)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
                await update.message.reply_voice(
                    voice=open(temp_file.name, 'rb'),
                    caption=f"üéß –û–∑–≤—É—á–∫–∞ —Ç–µ–∫—Å—Ç–∞ ({self.supported_languages[user_lang]})"
                )
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.unlink(temp_file.name)
                
            await status_msg.delete()
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            keyboard = [
                [InlineKeyboardButton("üéß –ï—â–µ —Ç–µ–∫—Å—Ç –≤ —Ä–µ—á—å", callback_data="tts")],
                [InlineKeyboardButton("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", callback_data="visualize")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–∑–≤—É—á–µ–Ω! –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"TTS error: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å.")

    async def handle_visualization(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞"""
        if len(text) > 2000:
            await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ú–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
            
        viz_type = context.user_data.get('viz_type', 'stats')
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
            status_msg = await update.message.reply_text("üìä –°–æ–∑–¥–∞—é –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫—É...")
            
            if viz_type == 'freq':
                await self.create_frequency_analysis(update, text)
            elif viz_type == 'stats':
                await self.create_text_statistics(update, text)
            elif viz_type == 'pie':
                await self.create_pie_chart(update, text)
            elif viz_type == 'structure':
                await self.create_text_structure(update, text)
            else:
                await self.create_text_statistics(update, text)
                
            await status_msg.delete()
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            keyboard = [
                [InlineKeyboardButton("üìä –ï—â–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", callback_data="visualize")],
                [InlineKeyboardButton("üéß –¢–µ–∫—Å—Ç –≤ —Ä–µ—á—å", callback_data="tts")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚úÖ –ò–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞ –≥–æ—Ç–æ–≤–∞! –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"Visualization error: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")

    async def create_frequency_analysis(self, update: Update, text: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Å—Ç–æ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        words = re.findall(r'\b[–∞-—èa-z]{3,}\b', text.lower())
        word_freq = Counter(words)
        
        top_words = word_freq.most_common(10)
        
        if not top_words:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        fig, ax = plt.subplots(figsize=(12, 8))
        
        words_list = [word[0] for word in top_words]
        counts = [word[1] for word in top_words]
        
        colors = plt.cm.viridis(np.linspace(0, 1, len(words_list)))
        bars = ax.barh(words_list, counts, color=colors)
        
        ax.set_xlabel('–ß–∞—Å—Ç–æ—Ç–∞ –≤—Å—Ç—Ä–µ—á–∞–µ–º–æ—Å—Ç–∏', fontsize=12)
        ax.set_title('–¢–æ–ø-10 —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ', fontsize=14, pad=20)
        ax.grid(axis='x', alpha=0.3)
        
        for bar, count in zip(bars, counts):
            width = bar.get_width()
            ax.text(width + 0.1, bar.get_y() + bar.get_height()/2, 
                   f'{count}', ha='left', va='center', fontweight='bold')
        
        plt.tight_layout()
        
        buffer = BytesIO()
        plt.savefig(buffer, format='png', dpi=120, bbox_inches='tight')
        plt.close()
        buffer.seek(0)
        
        freq_text = "üìä **–¢–æ–ø-5 —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö —Å–ª–æ–≤:**\n"
        for i, (word, count) in enumerate(top_words[:5], 1):
            freq_text += f"{i}. **{word}** - {count} —Ä–∞–∑\n"
        freq_text += f"\n–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤: {len(word_freq)}"
        
        await update.message.reply_photo(
            photo=buffer,
            caption=freq_text,
            parse_mode='Markdown'
        )

    async def create_text_statistics(self, update: Update, text: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ–∫—Å—Ç–∞"""
        words = text.split()
        sentences = re.split(r'[.!?]+', text)
        sentences = [s.strip() for s in sentences if s.strip()]
        
        chars_total = len(text)
        chars_no_spaces = len(text.replace(' ', ''))
        word_count = len(words)
        sentence_count = len(sentences)
        paragraph_count = text.count('\n\n') + 1
        avg_word_len = sum(len(word) for word in words) / word_count if words else 0
        avg_sentence_len = word_count / sentence_count if sentence_count else 0
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫—É
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 10))
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        categories = ['–°–∏–º–≤–æ–ª—ã', '–°–ª–æ–≤–∞', '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', '–ê–±–∑–∞—Ü—ã']
        values = [chars_total, word_count, sentence_count, paragraph_count]
        colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4']
        
        bars1 = ax1.bar(categories, values, color=colors, alpha=0.8)
        ax1.set_title('–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—Å—Ç–∞', fontsize=12, fontweight='bold')
        ax1.grid(axis='y', alpha=0.3)
        
        for bar, value in zip(bars1, values):
            ax1.text(bar.get_x() + bar.get_width()/2, bar.get_height() + max(values)*0.01,
                   f'{value}', ha='center', va='bottom', fontweight='bold')
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–ª–æ–≤
        word_lengths = [len(word) for word in words]
        if word_lengths:
            ax2.hist(word_lengths, bins=range(1, max(word_lengths) + 2), 
                    color='#FFD166', alpha=0.7, edgecolor='black')
            ax2.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–ª–æ–≤', fontsize=12, fontweight='bold')
            ax2.set_xlabel('–î–ª–∏–Ω–∞ —Å–ª–æ–≤–∞')
            ax2.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
            ax2.grid(alpha=0.3)
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤
        char_categories = ['–í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤', '–ë–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤']
        char_values = [chars_total, chars_no_spaces]
        bars3 = ax3.bar(char_categories, char_values, color=['#EF476F', '#06D6A0'], alpha=0.8)
        ax3.set_title('–ê–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–æ–≤', fontsize=12, fontweight='bold')
        ax3.grid(axis='y', alpha=0.3)
        
        for bar, value in zip(bars3, char_values):
            ax3.text(bar.get_x() + bar.get_width()/2, bar.get_height() + max(char_values)*0.01,
                   f'{value}', ha='center', va='bottom', fontweight='bold')
        
        # –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        avg_categories = ['–°—Ä. –¥–ª–∏–Ω–∞ —Å–ª–æ–≤–∞', '–°—Ä. —Å–ª–æ–≤ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏']
        avg_values = [round(avg_word_len, 1), round(avg_sentence_len, 1)]
        bars4 = ax4.bar(avg_categories, avg_values, color=['#118AB2', '#073B4C'], alpha=0.8)
        ax4.set_title('–°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è', fontsize=12, fontweight='bold')
        ax4.grid(axis='y', alpha=0.3)
        
        for bar, value in zip(bars4, avg_values):
            ax4.text(bar.get_x() + bar.get_width()/2, bar.get_height() + max(avg_values)*0.1,
                   f'{value}', ha='center', va='bottom', fontweight='bold')
        
        plt.tight_layout(pad=3.0)
        
        buffer = BytesIO()
        plt.savefig(buffer, format='png', dpi=120, bbox_inches='tight')
        plt.close()
        buffer.seek(0)
        
        stats_text = (
            f"üìà **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—Å—Ç–∞:**\n\n"
            f"‚Ä¢ üìù **–°–∏–º–≤–æ–ª—ã:** {chars_total} (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤: {chars_no_spaces})\n"
            f"‚Ä¢ üî§ **–°–ª–æ–≤–∞:** {word_count}\n"
            f"‚Ä¢ üìñ **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:** {sentence_count}\n"
            f"‚Ä¢ üìë **–ê–±–∑–∞—Ü—ã:** {paragraph_count}\n"
            f"‚Ä¢ üìè **–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Å–ª–æ–≤–∞:** {avg_word_len:.1f} —Å–∏–º–≤.\n"
            f"‚Ä¢ üí¨ **–°–ª–æ–≤ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏:** {avg_sentence_len:.1f}"
        )
        
        await update.message.reply_photo(
            photo=buffer,
            caption=stats_text,
            parse_mode='Markdown'
        )

    async def create_pie_chart(self, update: Update, text: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã"""
        words = re.findall(r'\b[–∞-—èa-z]+\b', text.lower())
        
        short_words = [w for w in words if len(w) <= 3]
        medium_words = [w for w in words if 4 <= len(w) <= 6]
        long_words = [w for w in words if len(w) >= 7]
        
        categories = ['–ö–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞ (1-3 —Å–∏–º–≤)', '–°—Ä–µ–¥–Ω–∏–µ —Å–ª–æ–≤–∞ (4-6 —Å–∏–º–≤)', '–î–ª–∏–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ (7+ —Å–∏–º–≤)']
        sizes = [len(short_words), len(medium_words), len(long_words)]
        colors = ['#FF9999', '#66B2FF', '#99FF99']
        
        if sum(sizes) == 0:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç–µ.")
            return
        
        fig, ax = plt.subplots(figsize=(10, 8))
        wedges, texts, autotexts = ax.pie(
            sizes, 
            labels=categories, 
            colors=colors,
            autopct='%1.1f%%',
            startangle=90
        )
        
        for autotext in autotexts:
            autotext.set_color('white')
            autotext.set_fontweight('bold')
        
        ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–≤ –ø–æ –¥–ª–∏–Ω–µ', fontsize=14, fontweight='bold')
        plt.tight_layout()
        
        buffer = BytesIO()
        plt.savefig(buffer, format='png', dpi=120, bbox_inches='tight')
        plt.close()
        buffer.seek(0)
        
        pie_text = (
            f"üéØ **–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–≤ –ø–æ –¥–ª–∏–Ω–µ:**\n\n"
            f"‚Ä¢ –ö–æ—Ä–æ—Ç–∫–∏–µ (1-3 —Å–∏–º–≤): {len(short_words)} —Å–ª–æ–≤\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ (4-6 —Å–∏–º–≤): {len(medium_words)} —Å–ª–æ–≤\n"
            f"‚Ä¢ –î–ª–∏–Ω–Ω—ã–µ (7+ —Å–∏–º–≤): {len(long_words)} —Å–ª–æ–≤\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Å–ª–æ–≤: {len(words)}"
        )
        
        await update.message.reply_photo(
            photo=buffer,
            caption=pie_text,
            parse_mode='Markdown'
        )

    async def create_text_structure(self, update: Update, text: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–µ–∫—Å—Ç–∞"""
        paragraphs = [p for p in text.split('\n\n') if p.strip()]
        sentences = [s for s in re.split(r'[.!?]+', text) if s.strip()]
        
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
        
        if paragraphs:
            para_lengths = [len(p.split()) for p in paragraphs]
            ax1.bar(range(1, len(paragraphs) + 1), para_lengths, 
                   color=plt.cm.Set3(np.linspace(0, 1, len(paragraphs))), 
                   alpha=0.7)
            ax1.set_title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –∞–±–∑–∞—Ü–∞—Ö', fontweight='bold')
            ax1.set_xlabel('–ù–æ–º–µ—Ä –∞–±–∑–∞—Ü–∞')
            ax1.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤')
            ax1.grid(axis='y', alpha=0.3)
        
        if sentences:
            sent_lengths = [len(s.split()) for s in sentences[:15]]
            ax2.bar(range(1, len(sent_lengths) + 1), sent_lengths,
                   color=plt.cm.Pastel1(np.linspace(0, 1, len(sent_lengths))),
                   alpha=0.7)
            ax2.set_title('–î–ª–∏–Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–ø–µ—Ä–≤—ã–µ 15)', fontweight='bold')
            ax2.set_xlabel('–ù–æ–º–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è')
            ax2.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤')
            ax2.grid(axis='y', alpha=0.3)
        
        plt.tight_layout()
        
        buffer = BytesIO()
        plt.savefig(buffer, format='png', dpi=120, bbox_inches='tight')
        plt.close()
        buffer.seek(0)
        
        structure_text = (
            f"üìã **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ–∫—Å—Ç–∞:**\n\n"
            f"‚Ä¢ –ê–±–∑–∞—Ü—ã: {len(paragraphs)}\n"
            f"‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {len(sentences)}\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –∞–±–∑–∞—Ü–∞: {len(paragraphs) and sum(len(p.split()) for p in paragraphs) / len(paragraphs):.1f} —Å–ª–æ–≤\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {len(sentences) and sum(len(s.split()) for s in sentences) / len(sentences):.1f} —Å–ª–æ–≤"
        )
        
        await update.message.reply_photo(
            photo=buffer,
            caption=structure_text,
            parse_mode='Markdown'
        )

    async def show_interactive_menu(self, query, context):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π"""
        context.user_data.clear()
        context.user_data['mode'] = 'interactive'
        
        keyboard = [
            [InlineKeyboardButton("üìö –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏", callback_data="flashcards")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = """
üéÆ **–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è**

–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ:

üìö **–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏** - –∏–∑—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–Ω—è—Ç–∏–π

–°–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏!
        """
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

    async def show_help(self, query, context):
        """–ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏"""
        context.user_data.clear()
        
        help_text = """
‚ÑπÔ∏è **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

**–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: –ê–Ω–¥—Ä–µ—è–Ω–æ–≤ –ù.**
**–®–∫–æ–ª–∞: –ú–ë–û–£ "–õ–∏—Ü–µ–π ‚Ññ136**

üéß **–¢–µ–∫—Å—Ç –≤ —Ä–µ—á—å:**
1. –ù–∞–∂–º–∏—Ç–µ "–¢–µ–∫—Å—Ç –≤ —Ä–µ—á—å"
2. –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤)
4. –ü–æ–ª—É—á–∏—Ç–µ –æ–∑–≤—É—á–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç

üìä **–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞:**
1. –ù–∞–∂–º–∏—Ç–µ "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞"
2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
4. –ü–æ–ª—É—á–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

        """
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(help_text, reply_markup=reply_markup, parse_mode='Markdown')

    async def show_main_menu(self, query, context):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        context.user_data.clear()
        
        keyboard = [
            [InlineKeyboardButton("üéß –¢–µ–∫—Å—Ç –≤ —Ä–µ—á—å", callback_data="tts")],
            [InlineKeyboardButton("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞", callback_data="visualize")],
            [InlineKeyboardButton("üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è", callback_data="interactive")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "ü§ñ **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        application = Application.builder().token(self.token).build()
        
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CallbackQueryHandler(self.handle_button))
        
        application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND, 
            self.handle_text_message
        ))
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        application.run_polling()

if __name__ == '__main__':
    BOT_TOKEN = ""
    
    if BOT_TOKEN == "":
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
    else:
        bot = EducationalBot(BOT_TOKEN)
        bot.run()
